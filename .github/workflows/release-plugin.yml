name: 多项目发布

on:
  push:
    tags:
      - 'v*.*.*-*'  # 匹配如 v1.0.2-podlove-publisher 的标签

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取所有历史以便访问提交信息

    - name: 提取项目信息
      id: project_info
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=$(echo $TAG | cut -d'-' -f1)
        VERSION=${VERSION#v}
        PROJECT=$(echo $TAG | cut -d'-' -f2-)
        echo "PROJECT=$PROJECT" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "TAG=$TAG" >> $GITHUB_OUTPUT
        echo "项目名称: $PROJECT"
        echo "版本号: $VERSION"
        echo "标签: $TAG"
        
        # 查找项目路径
        PROJECT_PATH=$(find . -type d -name "$PROJECT" | grep -v "^\./\." | head -n 1)
        if [ -n "$PROJECT_PATH" ]; then
          PROJECT_PATH=${PROJECT_PATH#./}
          echo "PROJECT_PATH=$PROJECT_PATH" >> $GITHUB_OUTPUT
          echo "找到项目路径: $PROJECT_PATH"
        else
          echo "错误：未找到项目 $PROJECT 的目录" >&2
          exit 1
        fi

    - name: 压缩项目文件
      id: zip_project
      run: |
        if [ -d "${{ steps.project_info.outputs.PROJECT_PATH }}" ]; then
          echo "已找到项目目录：${{ steps.project_info.outputs.PROJECT_PATH }}"
          ZIP_FILE="${{ steps.project_info.outputs.VERSION }}.${{ steps.project_info.outputs.PROJECT }}.zip"
          (cd "${{ steps.project_info.outputs.PROJECT_PATH }}" && zip -r "../../$ZIP_FILE" .)
          echo "项目文件已成功压缩为 $ZIP_FILE"
          echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_OUTPUT
        else
          echo "错误：未找到项目目录 ${{ steps.project_info.outputs.PROJECT_PATH }}" >&2
          echo "当前目录结构："
          ls -R
          exit 1
        fi

    - name: 生成项目源代码压缩包
      id: create_source_archives
      run: |
        SOURCE_NAME="${{ steps.project_info.outputs.VERSION }}.${{ steps.project_info.outputs.PROJECT }}-source"
        SOURCE_ZIP="${SOURCE_NAME}.zip"
        SOURCE_TAR="${SOURCE_NAME}.tar.gz"
        
        # 创建 ZIP 源代码包
        (cd "${{ steps.project_info.outputs.PROJECT_PATH }}" && zip -r "../../$SOURCE_ZIP" . -x "*.zip" "*.tar.gz")
        
        # 创建 TAR.GZ 源代码包
        (cd "${{ steps.project_info.outputs.PROJECT_PATH }}" && tar czf "../../$SOURCE_TAR" --exclude="*.zip" --exclude="*.tar.gz" .)
        
        echo "SOURCE_ZIP=$SOURCE_ZIP" >> $GITHUB_OUTPUT
        echo "SOURCE_TAR=$SOURCE_TAR" >> $GITHUB_OUTPUT

    - name: 获取项目特定的最近提交信息
      id: recent_commits
      run: |
        cd ${{ steps.project_info.outputs.PROJECT_PATH }}
        PROJECT="${{ steps.project_info.outputs.PROJECT }}"
        COMMITS=$(git log -n 20 --pretty=format:"%h %s" -- . | head -n 5 | sed 's/^/* /')
        if [ -z "$COMMITS" ]; then
          echo "未找到与项目 $PROJECT 相关的提交信息。"
          COMMITS="* 未找到与本项目直接相关的最近提交信息。"
        fi
        echo "COMMITS<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMITS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 生成发布说明 
      run: |
        cat << EOF > RELEASE_NOTES.md
        # ${{ steps.project_info.outputs.PROJECT }} 发布说明

        ## 版本信息
        - 版本号: ${{ steps.project_info.outputs.VERSION }}
        - 项目: ${{ steps.project_info.outputs.PROJECT }}
        - 标签: ${{ steps.project_info.outputs.TAG }}

        ## 文件详情
        - 发布文件: ${{ steps.zip_project.outputs.ZIP_FILE }}
        - 源代码 (ZIP): ${{ steps.create_source_archives.outputs.SOURCE_ZIP }}
        - 源代码 (TAR.GZ): ${{ steps.create_source_archives.outputs.SOURCE_TAR }}
        - 内容: ${{ steps.project_info.outputs.PROJECT }} 项目的完整文件和源代码

        ## 最近相关更新
        本次更新包含以下最近提交信息：
        ${{ steps.recent_commits.outputs.COMMITS }}

        ## 使用说明
        请参考项目的使用说明文档。

        ## 注意
        此资产由持续集成和发布流程自动生成，代表创建Git标签时项目的状态。
        如有问题，请参考项目的问题跟踪器或联系开发团队。
        EOF

    - name: 创建 Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASE_TITLE="V${{ steps.project_info.outputs.VERSION }}-${{ steps.project_info.outputs.PROJECT }}"
        if gh release create "${{ steps.project_info.outputs.TAG }}" \
          --title "$RELEASE_TITLE" \
          --notes-file RELEASE_NOTES.md \
          "${{ steps.zip_project.outputs.ZIP_FILE }}" \
          "${{ steps.create_source_archives.outputs.SOURCE_ZIP }}" \
          "${{ steps.create_source_archives.outputs.SOURCE_TAR }}"; then
          echo "Release 创建成功：$RELEASE_TITLE"
        else
          echo "错误：创建 Release 失败" >&2
          exit 1
        fi

    - name: 清理
      if: always()
      run: |
        rm -f ${{ steps.zip_project.outputs.ZIP_FILE }} \
              ${{ steps.create_source_archives.outputs.SOURCE_ZIP }} \
              ${{ steps.create_source_archives.outputs.SOURCE_TAR }}
        echo "临时压缩文件已清理"