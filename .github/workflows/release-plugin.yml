name: 多项目发布

on:
  push:
    tags:
      - 'v*.*.*-*'  # 匹配如 v1.0.2-podlove-publisher 的标签

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取所有历史以便访问提交信息

    - name: 提取项目信息
      id: project_info
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=$(echo $TAG | cut -d'-' -f1)
        VERSION=${VERSION#v}
        PROJECT=$(echo $TAG | cut -d'-' -f2-)
        echo "PROJECT=$PROJECT" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "TAG=$TAG" >> $GITHUB_OUTPUT
        echo "项目名称: $PROJECT"
        echo "版本号: $VERSION"
        echo "标签: $TAG"
        
        # 查找项目路径
        PROJECT_PATH=$(find . -type d -name "$PROJECT" | grep -v "^\./\." | head -n 1)
        if [ -n "$PROJECT_PATH" ]; then
          PROJECT_PATH=${PROJECT_PATH#./}
          echo "PROJECT_PATH=$PROJECT_PATH" >> $GITHUB_OUTPUT
          echo "找到项目路径: $PROJECT_PATH"
        else
          echo "错误：未找到项目 $PROJECT 的目录" >&2
          exit 1
        fi

    - name: 显示当前目录结构
      run: |
        echo "当前目录结构："
        ls -R

    - name: 压缩项目文件
      id: zip_project
      run: |
        if [ -d "${{ steps.project_info.outputs.PROJECT_PATH }}" ]; then
          echo "已找到项目目录：${{ steps.project_info.outputs.PROJECT_PATH }}"
          TEMP_DIR="${{ steps.project_info.outputs.PROJECT }}"
          mkdir -p "$TEMP_DIR"
          cp -R "${{ steps.project_info.outputs.PROJECT_PATH }}"/* "$TEMP_DIR"
          ZIP_FILE="${{ steps.project_info.outputs.VERSION }}.${{ steps.project_info.outputs.PROJECT }}.zip"
          zip -r "$ZIP_FILE" "$TEMP_DIR"
          rm -rf "$TEMP_DIR"
          echo "项目文件已成功压缩为 $ZIP_FILE"
          echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_OUTPUT
        else
          echo "错误：未找到项目目录 ${{ steps.project_info.outputs.PROJECT_PATH }}" >&2
          echo "当前目录结构："
          ls -R
          exit 1
        fi

    - name: 检查 zip 文件
      run: |
        if [ -f "${{ steps.zip_project.outputs.ZIP_FILE }}" ]; then
          echo "ZIP 文件已成功创建：${{ steps.zip_project.outputs.ZIP_FILE }}"
        else
          echo "错误：未找到 ZIP 文件 ${{ steps.zip_project.outputs.ZIP_FILE }}" >&2
          exit 1
        fi

    - name: 获取项目特定的最近提交信息
      id: recent_commits
      run: |
        cd ${{ steps.project_info.outputs.PROJECT_PATH }}
        COMMITS=$(git log -n 5 --pretty=format:"* %s" -- . | sed 's/^/    /')
        echo "COMMITS<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMITS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 生成发布说明
      run: |
        cat << EOF > RELEASE_NOTES.md
        # ${{ steps.project_info.outputs.PROJECT }} 发布说明

        ## 版本信息
        - 版本号: ${{ steps.project_info.outputs.VERSION }}
        - 项目: ${{ steps.project_info.outputs.PROJECT }}
        - 标签: ${{ steps.project_info.outputs.TAG }}

        ## 文件详情
        - 文件名: ${{ steps.project_info.outputs.VERSION }}.${{ steps.project_info.outputs.PROJECT }}.zip
        - 内容: ${{ steps.project_info.outputs.PROJECT }} 文件夹的完整目录结构和文件

        ## 最近提交
        ${{ steps.recent_commits.outputs.COMMITS }}

        ## 使用说明
        请参考项目的使用说明文档。

        ## 注意
        此资产由持续集成和发布流程自动生成，代表创建Git标签时项目的状态。
        如有问题，请参考项目的问题跟踪器或联系开发团队。
        EOF

    - name: 创建 Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASE_TITLE="V${{ steps.project_info.outputs.VERSION }}-${{ steps.project_info.outputs.PROJECT }}"
        if gh release create "${{ steps.project_info.outputs.TAG }}" \
          --title "$RELEASE_TITLE" \
          --notes-file RELEASE_NOTES.md \
          "${{ steps.zip_project.outputs.ZIP_FILE }}"; then
          echo "Release 创建成功：$RELEASE_TITLE"
        else
          echo "错误：创建 Release 失败" >&2
          exit 1
        fi

    - name: 清理
      if: always()
      run: |
        if rm -f ${{ steps.zip_project.outputs.ZIP_FILE }}; then
          echo "临时 ZIP 文件已清理"
        else
          echo "警告：清理临时 ZIP 文件失败" >&2
        fi